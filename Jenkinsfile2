// Pipeline template for building php binaries
// 
// dependencies:
// This pipeline depends on the following files and folders:
// - ./nfpm.yaml
// 
// Usage:
// 1. Update all the following var definitions
// 2. Add/Remove stages as fit. all the stages in this pipeline are generalized
//    so only the var definitions are needed to be updated by default
// Working Pipeline
// https://github.com/productsupcom/bin-service-image-color-detection/blob/master/Jenkinsfile
// https://github.com/productsupcom/bin-service-image-color-detection/blob/master/nfpm.yaml


def name                       = "bin-{binary-name}"
def slack_notification_channel = "#{notofication-channel}"
def dependancies               = ""
def supporting_services        = "dev-tools dev-tools-80"
def php_version                = '7.2'
def box_version                = "3.8.5"
def build_number
def branch
def package_name
String gitCommitHash
String gitCommitAuthor
String gitCommitMessage

pipeline {
    agent { label 'jenkins-4'}
    options {
        buildDiscarder(
            logRotator(
                numToKeepStr: '5',
                artifactNumToKeepStr: '5'
            )
        )
        timestamps()
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }

    environment {
        COMPOSE_PROJECT_NAME = "${env.JOB_NAME}"
        PUP_DOCKER_BINARIES_PATH = "/usr/local/bin"
    }

    stages {
        // Enable Git Discovery
        stage("Checkout") {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: env.BRANCH_NAME]],
                    extensions: [[$class: 'CloneOption', noTags: false, shallow: false, depth: 0, reference: '']],
                    userRemoteConfigs: scm.userRemoteConfigs,
                ])
            }
        }

        stage("Load Common Library") {
            steps {
                dir('common') {
                    git (
                        url: 'https://github.com/alzachos/jenkins-common',
                        branch: 'master',
                        credentialsId: "${GLOBAL_GITHUB_CREDENTIALS_ID}"
                    )
                    common = load 'common_pipeline_functions.groovy'
                }
            }
        }

        stage('Prepare Info') {
            steps {
                common.getterInfo()
            }
        }

        // Checkout development for tests
        stage ('Checkout projects') {
            parallel {
                stage ( 'checkout project' ) {
                    steps {
                        dir ( "${name}" ) {
                            deleteDir()
                            checkout scm
                        }
                    }
                }
                stage ('Checkout development') {
                    steps {
                        dir ('development') {
                            deleteDir()
                            git (
                                url: 'git@github.com:productsupcom/development.git',
                                credentialsId: 'jenkins-ssh'
                            )
                        }
                    }
                }
            }
        }

        stage ('pull docker images') {
            steps {
                dir('development') {
                    script {
                        docker.withRegistry('https://docker.productsup.com', 'docker-registry') {
                            sh "docker-compose pull ${dependancies} ${supporting_services}"
                        }
                    }
                }
            }
        }

        stage ('Build project - PHP 8.0') {
            steps {
                dir('development') {
                    script {
                        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'repo-packagist-com',usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                            sh "docker-compose run --workdir /www/${name} dev-tools-80 composer config --auth http-basic.repo.packagist.com $USERNAME $PASSWORD"
                            sh "docker-compose run --workdir /www/${name} dev-tools-80 composer install --no-interaction"
                        }
                    }
                }
            }
        }

        stage ('Unit tests - PHP 8.0') {
            steps {
                dir('development') {
                    sh "docker-compose up -d ${dependancies} ${supporting_services}"
                    sh "docker-compose run --workdir /www/${name} -T dev-tools-80 php vendor/bin/phpunit tests"
                }
            }
        }

        stage ('Unit tests - PHP 7.2') {
            steps {
                dir('development') {
                    sh "docker-compose run --workdir /www/${name} -T dev-tools php vendor/bin/phpunit tests"
                }
            }
        }

        stage ('build phar file') {
            steps {
                dir("${name}") {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: env.BRANCH_NAME]],
                        extensions: [[$class: 'CloneOption', noTags: false, shallow: false, depth: 0, reference: '']],
                        userRemoteConfigs: scm.userRemoteConfigs,
                    ])
                    script {
                        docker.withRegistry('https://docker.productsup.com', 'docker-registry') {
                            docker.image("docker.productsup.com/development/php-cli-${php_version}:latest").inside {
                                sh "wget https://github.com/box-project/box/releases/download/${box_version}/box.phar -O /usr/bin/box"
                                sh "chmod +x /usr/bin/box"
                                sh "box compile -c ./box.json"
                                sh "mv ${name}.phar ${name}-${branch}"
                            }
                        }
                    }
                }
            }
        }


        stage ('Build deb package') {
            steps {
                dir("${name}") {
                    script {
                        sh "ls -la"
                        sh "sed -i 's/REPLACE_BIN/${name}-${branch}/g' nfpm.yaml"
                        sh "sed -i 's/^name.*/name: \"${name}-${branch}\"/g' nfpm.yaml"
                        sh "version=${version} nfpm pkg --target ${package_name}_all.deb"
                        sh "cat nfpm.yaml"
                        sh "dpkg-deb -I ${package_name}_all.deb"
                        sh "dpkg -c ${package_name}_all.deb"
                    }
                }
            }
        }

        stage ('Publish deb package') {
            steps {
                dir("${name}") {
                    sshagent (credentials: ['jenkins-ssh']) {
                        script {
                            // backup the binary in workspace server
                            sh "scp -o StrictHostKeyChecking=no ${package_name}_all.deb root@workspace.productsup.com:/tmp/"
                            // upload to aptly
                            sh "scp -o StrictHostKeyChecking=no ${package_name}_all.deb root@aptly.productsup.com:/tmp/"
                            sh "ssh -o StrictHostKeyChecking=no root@aptly.productsup.com \"/usr/local/bin/publish.sh ${package_name}_all.deb\""
                        }
                    }
                }
            }
        }
    }

    post {
        // failure sends a failure slack massage if the pipeline exit with a failed state
        failure {
            slackSend message: "${name} <${RUN_DISPLAY_URL}|failed>.", channel: "${slack_notification_channel}", color: "danger"
        }
        // success sends a success slack massage if the pipeline exit with a success state
        // if building a PR post branch URL as PR comment
        success {
            slackSend message: "*${name} <${RUN_DISPLAY_URL}|success>*. \nAll checks passed for *${env.BRANCH_NAME}* \nat commit *${gitCommitHash}* \nwhen *${gitCommitAuthor}* performed \n> ${gitCommitMessage}.", channel: "${slack_notification_channel}", color: "good"
        }
        cleanup {
            dir('development') {
                sh "docker-compose down --volumes"
            }
            cleanWs deleteDirs: true
        }
    }
}